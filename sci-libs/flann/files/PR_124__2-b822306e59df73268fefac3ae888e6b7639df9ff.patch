From b822306e59df73268fefac3ae888e6b7639df9ff Mon Sep 17 00:00:00 2001
From: Clemens Korner <clemens.corny@gmail.com>
Date: Wed, 24 Jul 2013 15:36:07 +0200
Subject: [PATCH] update params in add_points

---
 src/cpp/flann/flann.cpp            | 54 ++++++++++++++++++++++++--------------
 src/cpp/flann/flann.h              | 20 ++++++++++----
 src/python/pyflann/flann_ctypes.py |  2 ++
 src/python/pyflann/index.py        | 10 ++++++-
 4 files changed, 61 insertions(+), 25 deletions(-)

diff --git a/src/cpp/flann/flann.cpp b/src/cpp/flann/flann.cpp
index e4dab4f..10bd1b9 100644
--- a/src/cpp/flann/flann.cpp
+++ b/src/cpp/flann/flann.cpp
@@ -427,7 +427,7 @@ flann_index_t flann_load_index_int(char* filename, int* dataset, int rows, int c
 
 template<typename Distance>
 int __flann_add_points(flann_index_t index_ptr, typename Distance::ElementType* dataset,
-                       int rows, float rebuild_threshold)
+                       int rows, float rebuild_threshold, float* speedup, FLANNParameters* flann_params)
 {
     typedef typename Distance::ElementType ElementType;
     try {
@@ -438,6 +438,16 @@ int __flann_add_points(flann_index_t index_ptr, typename Distance::ElementType*
         Matrix<ElementType> newPoints(dataset,rows,index->veclen());
         index->addPoints(newPoints, rebuild_threshold);
 
+        if (flann_params->algorithm==FLANN_INDEX_AUTOTUNED) {
+            IndexParams params = index->getParameters();
+            update_flann_parameters(params,flann_params);
+            SearchParams search_params = get_param<SearchParams>(params,"search_params");
+            *speedup = get_param<float>(params,"speedup");
+            flann_params->checks = search_params.checks;
+            flann_params->eps = search_params.eps;
+            flann_params->cb_index = get_param<float>(params,"cb_index",0.0);
+        }
+
         return 0;
     }
     catch (std::runtime_error& e) {
@@ -450,28 +460,29 @@ int __flann_add_points(flann_index_t index_ptr, typename Distance::ElementType*
 
 template<typename T>
 int _flann_add_points(flann_index_t index_ptr, T* dataset,
-                       int rows, float rebuild_threshold)
+                      int rows, float rebuild_threshold,
+                      float* speedup, FLANNParameters* flann_params)
 {
     if (flann_distance_type==FLANN_DIST_EUCLIDEAN) {
-        return __flann_add_points<L2<T> >(index_ptr, dataset, rows, rebuild_threshold);
+        return __flann_add_points<L2<T> >(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
     }
     else if (flann_distance_type==FLANN_DIST_MANHATTAN) {
-        return __flann_add_points<L1<T> >(index_ptr, dataset, rows, rebuild_threshold);
+        return __flann_add_points<L1<T> >(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
     }
     else if (flann_distance_type==FLANN_DIST_MINKOWSKI) {
-        return __flann_add_points<MinkowskiDistance<T> >(index_ptr, dataset, rows, rebuild_threshold);
+        return __flann_add_points<MinkowskiDistance<T> >(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
     }
     else if (flann_distance_type==FLANN_DIST_HIST_INTERSECT) {
-        return __flann_add_points<HistIntersectionDistance<T> >(index_ptr, dataset, rows, rebuild_threshold);
+        return __flann_add_points<HistIntersectionDistance<T> >(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
     }
     else if (flann_distance_type==FLANN_DIST_HELLINGER) {
-        return __flann_add_points<HellingerDistance<T> >(index_ptr, dataset, rows, rebuild_threshold);
+        return __flann_add_points<HellingerDistance<T> >(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
     }
     else if (flann_distance_type==FLANN_DIST_CHI_SQUARE) {
-        return __flann_add_points<ChiSquareDistance<T> >(index_ptr, dataset, rows, rebuild_threshold);
+        return __flann_add_points<ChiSquareDistance<T> >(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
     }
     else if (flann_distance_type==FLANN_DIST_KULLBACK_LEIBLER) {
-        return __flann_add_points<KL_Divergence<T> >(index_ptr, dataset, rows, rebuild_threshold);
+        return __flann_add_points<KL_Divergence<T> >(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
     }
     else {
         Logger::error( "Distance type unsupported in the C bindings, use the C++ bindings instead\n");
@@ -479,29 +490,34 @@ int _flann_add_points(flann_index_t index_ptr, T* dataset,
     }
 }
 
-int flann_add_points(flann_index_t index_ptr, float* dataset, int rows, float rebuild_threshold)
+int flann_add_points(flann_index_t index_ptr, float* dataset, int rows, float rebuild_threshold,
+                     float* speedup, FLANNParameters* flann_params)
 {
-    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold);
+    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
 }
 
-int flann_add_points_float(flann_index_t index_ptr, float* dataset, int rows, float rebuild_threshold)
+int flann_add_points_float(flann_index_t index_ptr, float* dataset, int rows, float rebuild_threshold,
+                           float* speedup, FLANNParameters* flann_params)
 {
-    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold);
+    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
 }
 
-int flann_add_points_double(flann_index_t index_ptr, double* dataset, int rows, float rebuild_threshold)
+int flann_add_points_double(flann_index_t index_ptr, double* dataset, int rows, float rebuild_threshold,
+                            float* speedup, FLANNParameters* flann_params)
 {
-    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold);
+    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
 }
 
-int flann_add_points_byte(flann_index_t index_ptr, unsigned char* dataset, int rows, float rebuild_threshold)
+int flann_add_points_byte(flann_index_t index_ptr, unsigned char* dataset, int rows, float rebuild_threshold,
+                          float* speedup, FLANNParameters* flann_params)
 {
-    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold);
+    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
 }
 
-int flann_add_points_int(flann_index_t index_ptr, int* dataset, int rows, float rebuild_threshold)
+int flann_add_points_int(flann_index_t index_ptr, int* dataset, int rows, float rebuild_threshold,
+                         float* speedup, FLANNParameters* flann_params)
 {
-    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold);
+    return _flann_add_points(index_ptr, dataset, rows, rebuild_threshold, speedup, flann_params);
 }
 
 
diff --git a/src/cpp/flann/flann.h b/src/cpp/flann/flann.h
index 8ba4865..7552c19 100644
--- a/src/cpp/flann/flann.h
+++ b/src/cpp/flann/flann.h
@@ -205,27 +205,37 @@ FLANN_EXPORT flann_index_t flann_load_index_int(char* filename,
 FLANN_EXPORT int flann_add_points(flann_index_t index_ptr,
                                   float* dataset,
                                   int rows,
-                                  float rebuild_threshold);
+                                  float rebuild_threshold,
+                                  float *speedup,
+                                  struct FLANNParameters *flann_params);
 
 FLANN_EXPORT int flann_add_points_float(flann_index_t index_ptr,
                                         float* dataset,
                                         int rows,
-                                        float rebuild_threshold);
+                                        float rebuild_threshold,
+                                        float *speedup,
+                                        struct FLANNParameters *flann_params);
 
 FLANN_EXPORT int flann_add_points_double(flann_index_t index_ptr,
                                          double* dataset,
                                          int rows,
-                                         float rebuild_threshold);
+                                         float rebuild_threshold,
+                                         float *speedup,
+                                         struct FLANNParameters *flann_params);
 
 FLANN_EXPORT int flann_add_points_byte(flann_index_t index_ptr,
                                        unsigned char* dataset,
                                        int rows,
-                                       float rebuild_threshold);
+                                       float rebuild_threshold,
+                                       float *speedup,
+                                       struct FLANNParameters *flann_params);
 
 FLANN_EXPORT int flann_add_points_int(flann_index_t index_ptr,
                                       int* dataset,
                                       int rows,
-                                      float rebuild_threshold);
+                                      float rebuild_threshold,
+                                      float *speedup,
+                                      struct FLANNParameters *flann_params);
 
 
 /**
diff --git a/src/python/pyflann/flann_ctypes.py b/src/python/pyflann/flann_ctypes.py
index 4443b6c..dcbd748 100644
--- a/src/python/pyflann/flann_ctypes.py
+++ b/src/python/pyflann/flann_ctypes.py
@@ -255,6 +255,8 @@ def define_functions(str):
         ndpointer(%(numpy)s, ndim = 2, flags='aligned, c_contiguous'), # dataset
         c_int, # rows
         c_int, # rebuild_threshhold
+        POINTER(c_float), # speedup
+        POINTER(FLANNParameters)  # flann_params
 ]
 flann.add_points[%(numpy)s] = flannlib.flann_add_points_%(C)s
 """)
diff --git a/src/python/pyflann/index.py b/src/python/pyflann/index.py
index 697adf7..4397af4 100644
--- a/src/python/pyflann/index.py
+++ b/src/python/pyflann/index.py
@@ -205,7 +205,15 @@ def add_points(self, pts, rebuild_threshold=2):
             raise FLANNException("Cannot handle type: %s"%pts.dtype)
         pts = ensure_2d_array(pts,default_flags)
         npts, dim = pts.shape
-        flann.add_points[self.__curindex_type](self.__curindex, pts, npts, rebuild_threshold)
+
+        speedup = c_float(0)
+
+        flann.add_points[self.__curindex_type](self.__curindex, pts, npts, rebuild_threshold, byref(speedup), pointer(self.__flann_parameters))
+
+        params = dict(self.__flann_parameters)
+        params["speedup"] = speedup.value
+
+        return params
 
     def nn_index(self, qpts, num_neighbors = 1, **kwargs):
         """
-- 
1.9.3

